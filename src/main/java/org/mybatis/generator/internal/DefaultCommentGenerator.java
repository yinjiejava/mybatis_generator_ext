/*
 *  Copyright 2008 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.mybatis.generator.internal;

import static org.mybatis.generator.internal.util.StringUtility.isTrue;

import java.util.Date;
import java.util.Properties;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;

/**
 * @author Jeff Butler
 * 
 */
public class DefaultCommentGenerator implements CommentGenerator {

	private Properties properties;
	private boolean suppressDate;
	private boolean suppressAllComments;

	public DefaultCommentGenerator() {
		super();
		properties = new Properties();
		suppressDate = false;
		suppressAllComments = false;
	}

	public void addJavaFileComment(CompilationUnit compilationUnit) {
		// add no file level comments by default
		return;
	}

	/**
	 * Adds a suitable comment to warn users that the element was generated, and
	 * when it was generated.
	 */
	public void addComment(XmlElement xmlElement) {
		if (suppressAllComments) {
			return;
		}
		
		return;
//		xmlElement.addElement(new TextElement("<!--")); //$NON-NLS-1$
//
//		StringBuilder sb = new StringBuilder();
//		sb.append("  WARNING - "); //$NON-NLS-1$
//		sb.append(MergeConstants.NEW_ELEMENT_TAG);
//		xmlElement.addElement(new TextElement(sb.toString()));
//		xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify.")); //$NON-NLS-1$
//
//		String s = getDateString();
//		if (s != null) {
//			sb.setLength(0);
//			sb.append("  This element was generated on "); //$NON-NLS-1$
//			sb.append(s);
//			sb.append('.');
//			xmlElement.addElement(new TextElement(sb.toString()));
//		}
//
//		xmlElement.addElement(new TextElement("-->")); //$NON-NLS-1$
	}

	public void addRootComment(XmlElement rootElement) {
		// add no document level comments by default
		return;
	}

	public void addConfigurationProperties(Properties properties) {
		this.properties.putAll(properties);

		suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));

		suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
	}

	/**
	 * This method adds the custom javadoc tag for. You may do nothing if you do
	 * not wish to include the Javadoc tag - however, if you do not include the
	 * Javadoc tag then the Java merge capability of the eclipse plugin will
	 * break.
	 * 
	 * @param javaElement
	 *            the java element
	 */
	protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
		javaElement.addJavaDocLine(" *"); //$NON-NLS-1$
		StringBuilder sb = new StringBuilder();
		sb.append(" * "); //$NON-NLS-1$
		sb.append(MergeConstants.NEW_ELEMENT_TAG);
		if (markAsDoNotDelete) {
			sb.append(" do_not_delete_during_merge"); //$NON-NLS-1$
		}
		String s = getDateString();
		if (s != null) {
			sb.append(' ');
			sb.append(s);
		}
		javaElement.addJavaDocLine(sb.toString());
	}

	/**
	 * This method returns a formated date string to include in the Javadoc tag
	 * and XML comments. You may return null if you do not want the date in
	 * these documentation elements.
	 * 
	 * @return a string representing the current timestamp, or null
	 */
	protected String getDateString() {
		if (suppressDate) {
			return null;
		} else {
			return new Date().toString();
		}
	}

	public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
		innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$

		sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		innerClass.addJavaDocLine(sb.toString());

		addJavadocTag(innerClass, false);

		innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		innerEnum.addJavaDocLine("/**"); //$NON-NLS-1$
		innerEnum.addJavaDocLine(" * This enum was generated by MyBatis Generator."); //$NON-NLS-1$

		sb.append(" * This enum corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		innerEnum.addJavaDocLine(sb.toString());

		addJavadocTag(innerEnum, false);

		innerEnum.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	// 修改
	public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}
		if (introspectedColumn.getRemarks() == null || introspectedColumn.getRemarks().matches("\\s*")) {
			return;
		}
		field.addJavaDocLine("// " + introspectedColumn.getRemarks()); // 添加注释信息到doc
	}

	public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
		return;
	}

	private void addDocLine(Method method, String[] docs) {
		method.addJavaDocLine("/**");
		for (String string : docs) {
			method.addJavaDocLine(" * " + string);
		}
		method.addJavaDocLine(" */");
	}

	public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}

		if (method.getName().equals("deleteByPrimaryKey")) {
			addDocLine(method, new String[] { "根据主键删除", "@param id 主键值" });
		}
		if (method.getName().equals("countByExample")) {
			addDocLine(method, new String[] { "获取符合条件的记录数", "@param example 查询条件对象", "@return 记录数" });
		}
		if (method.getName().equals("deleteByExample")) {
			addDocLine(method, new String[] { "批量删除符合条件的记录", "@param example 查询条件对象", "@return 成功删除的数量" });
		}
		if (method.getName().equals("insert")) {
			addDocLine(method, new String[] { "新增记录", "@param record 待新增的对象" });
		}
		if (method.getName().equals("insertSelective")) {
			addDocLine(method, new String[] { "新增记录 <font color='blue'>（该操作为选择性的，只对record中不为空的属性生成sql语句）</font>", "@param record 待新增的对象" });
		}
		if (method.getName().equals("selectByExample")) {
			addDocLine(method, new String[] { "批量查询", "@param example 查询条件对象" });
		}
		if (method.getName().equals("selectByPrimaryKey")) {
			addDocLine(method, new String[] { "根据主键查询", "@param id 主键值" });
		}
		if (method.getName().equals("updateByExampleSelective")) {
			addDocLine(method, new String[] { "指量更新,将符合条件的记录统一更新为record的值 <font color='blue'>（该操作为选择性的，只对record中不为空的属性生成sql语句）</font>", "@param record 待更新到数据库的值", "@param example 查询条件对象", "@return 成功操作的记录数" });
		}
		if (method.getName().equals("updateByExample")) {
			addDocLine(method, new String[] { "指量更新,将符合条件的记录统一更新为record的值 ", "@param record 待更新到数据库的值", "@param example 查询条件对象", "@return 成功操作的记录数" });
		}
		if (method.getName().equals("updateByPrimaryKeySelective")) {
			addDocLine(method, new String[] { "根据主键更新记录 <font color='blue'>（该操作为选择性的，只对record中不为空的属性生成sql语句）</font>", "@param record 记录" });
		}
		if (method.getName().equals("updateByPrimaryKey")) {
			addDocLine(method, new String[] { "根据主键更新记录", "@param record 记录" });
		}

	}

	public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}
		if (introspectedColumn.getRemarks() == null || introspectedColumn.getRemarks().matches("\\s*")) {
			return;
		}
		method.addJavaDocLine("/**"); //$NON-NLS-1$
		method.addJavaDocLine(" * 返回" + introspectedColumn.getRemarks()); //$NON-NLS-1$
		method.addJavaDocLine(" * @return " + introspectedColumn.getRemarks());
		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}
		if (introspectedColumn.getRemarks() == null || introspectedColumn.getRemarks().matches("\\s*")) {
			return;
		}
		method.addJavaDocLine("/**"); //$NON-NLS-1$
		method.addJavaDocLine(" * 设置" + introspectedColumn.getRemarks()); //$NON-NLS-1$
		method.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
		if (suppressAllComments) {
			return;
		}

		StringBuilder sb = new StringBuilder();

		innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
		innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$

		sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		innerClass.addJavaDocLine(sb.toString());

		addJavadocTag(innerClass, markAsDoNotDelete);

		innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
	}
}
